// Code generated by sqlc. DO NOT EDIT.
// source: languages.sql

package authdb

import (
	"context"
)

const deleteLanguage = `-- name: DeleteLanguage :exec
delete from languages where id == $1 or "name" == $1
`

func (q *Queries) DeleteLanguage(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteLanguageStmt, deleteLanguage, id)
	return err
}

const getLanguage = `-- name: GetLanguage :one
select id, name from languages where id == $1 or "name" == $1 limit 1
`

func (q *Queries) GetLanguage(ctx context.Context, id int64) (Language, error) {
	row := q.queryRow(ctx, q.getLanguageStmt, getLanguage, id)
	var i Language
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getLanguages = `-- name: GetLanguages :many
select id, name from languages
`

func (q *Queries) GetLanguages(ctx context.Context) ([]Language, error) {
	rows, err := q.query(ctx, q.getLanguagesStmt, getLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Language
	for rows.Next() {
		var i Language
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLanguage = `-- name: UpdateLanguage :one
update languages set "name" = $1 where "name" == $2
returning id, name
`

type UpdateLanguageParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) UpdateLanguage(ctx context.Context, arg UpdateLanguageParams) (Language, error) {
	row := q.queryRow(ctx, q.updateLanguageStmt, updateLanguage, arg.Name, arg.Name_2)
	var i Language
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
