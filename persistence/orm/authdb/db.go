// Code generated by sqlc. DO NOT EDIT.

package authdb

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addApplicationRoleStmt, err = db.PrepareContext(ctx, addApplicationRole); err != nil {
		return nil, fmt.Errorf("error preparing query AddApplicationRole: %w", err)
	}
	if q.addUserLanguageStmt, err = db.PrepareContext(ctx, addUserLanguage); err != nil {
		return nil, fmt.Errorf("error preparing query AddUserLanguage: %w", err)
	}
	if q.addUserProviderStmt, err = db.PrepareContext(ctx, addUserProvider); err != nil {
		return nil, fmt.Errorf("error preparing query AddUserProvider: %w", err)
	}
	if q.addUserRoleStmt, err = db.PrepareContext(ctx, addUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query AddUserRole: %w", err)
	}
	if q.addUserTimezoneStmt, err = db.PrepareContext(ctx, addUserTimezone); err != nil {
		return nil, fmt.Errorf("error preparing query AddUserTimezone: %w", err)
	}
	if q.createApplicationStmt, err = db.PrepareContext(ctx, createApplication); err != nil {
		return nil, fmt.Errorf("error preparing query CreateApplication: %w", err)
	}
	if q.createIdentityProviderStmt, err = db.PrepareContext(ctx, createIdentityProvider); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIdentityProvider: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createTimezoneStmt, err = db.PrepareContext(ctx, createTimezone); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTimezone: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteApplicationStmt, err = db.PrepareContext(ctx, deleteApplication); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteApplication: %w", err)
	}
	if q.deleteCountryStmt, err = db.PrepareContext(ctx, deleteCountry); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCountry: %w", err)
	}
	if q.deleteIdentityProviderStmt, err = db.PrepareContext(ctx, deleteIdentityProvider); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteIdentityProvider: %w", err)
	}
	if q.deleteLanguageStmt, err = db.PrepareContext(ctx, deleteLanguage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLanguage: %w", err)
	}
	if q.deleteRolesStmt, err = db.PrepareContext(ctx, deleteRoles); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRoles: %w", err)
	}
	if q.deleteTimezoneStmt, err = db.PrepareContext(ctx, deleteTimezone); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTimezone: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getApplicationStmt, err = db.PrepareContext(ctx, getApplication); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplication: %w", err)
	}
	if q.getApplicationsStmt, err = db.PrepareContext(ctx, getApplications); err != nil {
		return nil, fmt.Errorf("error preparing query GetApplications: %w", err)
	}
	if q.getCountriesStmt, err = db.PrepareContext(ctx, getCountries); err != nil {
		return nil, fmt.Errorf("error preparing query GetCountries: %w", err)
	}
	if q.getCountryStmt, err = db.PrepareContext(ctx, getCountry); err != nil {
		return nil, fmt.Errorf("error preparing query GetCountry: %w", err)
	}
	if q.getIdentityProviderStmt, err = db.PrepareContext(ctx, getIdentityProvider); err != nil {
		return nil, fmt.Errorf("error preparing query GetIdentityProvider: %w", err)
	}
	if q.getIdentityProvidersStmt, err = db.PrepareContext(ctx, getIdentityProviders); err != nil {
		return nil, fmt.Errorf("error preparing query GetIdentityProviders: %w", err)
	}
	if q.getLanguageStmt, err = db.PrepareContext(ctx, getLanguage); err != nil {
		return nil, fmt.Errorf("error preparing query GetLanguage: %w", err)
	}
	if q.getLanguagesStmt, err = db.PrepareContext(ctx, getLanguages); err != nil {
		return nil, fmt.Errorf("error preparing query GetLanguages: %w", err)
	}
	if q.getRoleStmt, err = db.PrepareContext(ctx, getRole); err != nil {
		return nil, fmt.Errorf("error preparing query GetRole: %w", err)
	}
	if q.getRolesStmt, err = db.PrepareContext(ctx, getRoles); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoles: %w", err)
	}
	if q.getTimezoneStmt, err = db.PrepareContext(ctx, getTimezone); err != nil {
		return nil, fmt.Errorf("error preparing query GetTimezone: %w", err)
	}
	if q.getTimezonesStmt, err = db.PrepareContext(ctx, getTimezones); err != nil {
		return nil, fmt.Errorf("error preparing query GetTimezones: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.updateApplicationStmt, err = db.PrepareContext(ctx, updateApplication); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateApplication: %w", err)
	}
	if q.updateApplicationRoleStmt, err = db.PrepareContext(ctx, updateApplicationRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateApplicationRole: %w", err)
	}
	if q.updateCountryStmt, err = db.PrepareContext(ctx, updateCountry); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCountry: %w", err)
	}
	if q.updateIdentityProviderStmt, err = db.PrepareContext(ctx, updateIdentityProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateIdentityProvider: %w", err)
	}
	if q.updateLanguageStmt, err = db.PrepareContext(ctx, updateLanguage); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateLanguage: %w", err)
	}
	if q.updateRoleStmt, err = db.PrepareContext(ctx, updateRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRole: %w", err)
	}
	if q.updateTimezoneStmt, err = db.PrepareContext(ctx, updateTimezone); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTimezone: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserLanguageStmt, err = db.PrepareContext(ctx, updateUserLanguage); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserLanguage: %w", err)
	}
	if q.updateUserProviderStmt, err = db.PrepareContext(ctx, updateUserProvider); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserProvider: %w", err)
	}
	if q.updateUserRoleStmt, err = db.PrepareContext(ctx, updateUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRole: %w", err)
	}
	if q.updateUserTimezoneStmt, err = db.PrepareContext(ctx, updateUserTimezone); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserTimezone: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addApplicationRoleStmt != nil {
		if cerr := q.addApplicationRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addApplicationRoleStmt: %w", cerr)
		}
	}
	if q.addUserLanguageStmt != nil {
		if cerr := q.addUserLanguageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserLanguageStmt: %w", cerr)
		}
	}
	if q.addUserProviderStmt != nil {
		if cerr := q.addUserProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserProviderStmt: %w", cerr)
		}
	}
	if q.addUserRoleStmt != nil {
		if cerr := q.addUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserRoleStmt: %w", cerr)
		}
	}
	if q.addUserTimezoneStmt != nil {
		if cerr := q.addUserTimezoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserTimezoneStmt: %w", cerr)
		}
	}
	if q.createApplicationStmt != nil {
		if cerr := q.createApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createApplicationStmt: %w", cerr)
		}
	}
	if q.createIdentityProviderStmt != nil {
		if cerr := q.createIdentityProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIdentityProviderStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createTimezoneStmt != nil {
		if cerr := q.createTimezoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTimezoneStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteApplicationStmt != nil {
		if cerr := q.deleteApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteApplicationStmt: %w", cerr)
		}
	}
	if q.deleteCountryStmt != nil {
		if cerr := q.deleteCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCountryStmt: %w", cerr)
		}
	}
	if q.deleteIdentityProviderStmt != nil {
		if cerr := q.deleteIdentityProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteIdentityProviderStmt: %w", cerr)
		}
	}
	if q.deleteLanguageStmt != nil {
		if cerr := q.deleteLanguageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLanguageStmt: %w", cerr)
		}
	}
	if q.deleteRolesStmt != nil {
		if cerr := q.deleteRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRolesStmt: %w", cerr)
		}
	}
	if q.deleteTimezoneStmt != nil {
		if cerr := q.deleteTimezoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTimezoneStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getApplicationStmt != nil {
		if cerr := q.getApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationStmt: %w", cerr)
		}
	}
	if q.getApplicationsStmt != nil {
		if cerr := q.getApplicationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApplicationsStmt: %w", cerr)
		}
	}
	if q.getCountriesStmt != nil {
		if cerr := q.getCountriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCountriesStmt: %w", cerr)
		}
	}
	if q.getCountryStmt != nil {
		if cerr := q.getCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCountryStmt: %w", cerr)
		}
	}
	if q.getIdentityProviderStmt != nil {
		if cerr := q.getIdentityProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIdentityProviderStmt: %w", cerr)
		}
	}
	if q.getIdentityProvidersStmt != nil {
		if cerr := q.getIdentityProvidersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIdentityProvidersStmt: %w", cerr)
		}
	}
	if q.getLanguageStmt != nil {
		if cerr := q.getLanguageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLanguageStmt: %w", cerr)
		}
	}
	if q.getLanguagesStmt != nil {
		if cerr := q.getLanguagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLanguagesStmt: %w", cerr)
		}
	}
	if q.getRoleStmt != nil {
		if cerr := q.getRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoleStmt: %w", cerr)
		}
	}
	if q.getRolesStmt != nil {
		if cerr := q.getRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRolesStmt: %w", cerr)
		}
	}
	if q.getTimezoneStmt != nil {
		if cerr := q.getTimezoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTimezoneStmt: %w", cerr)
		}
	}
	if q.getTimezonesStmt != nil {
		if cerr := q.getTimezonesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTimezonesStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.updateApplicationStmt != nil {
		if cerr := q.updateApplicationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateApplicationStmt: %w", cerr)
		}
	}
	if q.updateApplicationRoleStmt != nil {
		if cerr := q.updateApplicationRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateApplicationRoleStmt: %w", cerr)
		}
	}
	if q.updateCountryStmt != nil {
		if cerr := q.updateCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCountryStmt: %w", cerr)
		}
	}
	if q.updateIdentityProviderStmt != nil {
		if cerr := q.updateIdentityProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateIdentityProviderStmt: %w", cerr)
		}
	}
	if q.updateLanguageStmt != nil {
		if cerr := q.updateLanguageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateLanguageStmt: %w", cerr)
		}
	}
	if q.updateRoleStmt != nil {
		if cerr := q.updateRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoleStmt: %w", cerr)
		}
	}
	if q.updateTimezoneStmt != nil {
		if cerr := q.updateTimezoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTimezoneStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserLanguageStmt != nil {
		if cerr := q.updateUserLanguageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserLanguageStmt: %w", cerr)
		}
	}
	if q.updateUserProviderStmt != nil {
		if cerr := q.updateUserProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserProviderStmt: %w", cerr)
		}
	}
	if q.updateUserRoleStmt != nil {
		if cerr := q.updateUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRoleStmt: %w", cerr)
		}
	}
	if q.updateUserTimezoneStmt != nil {
		if cerr := q.updateUserTimezoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserTimezoneStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	addApplicationRoleStmt     *sql.Stmt
	addUserLanguageStmt        *sql.Stmt
	addUserProviderStmt        *sql.Stmt
	addUserRoleStmt            *sql.Stmt
	addUserTimezoneStmt        *sql.Stmt
	createApplicationStmt      *sql.Stmt
	createIdentityProviderStmt *sql.Stmt
	createRoleStmt             *sql.Stmt
	createTimezoneStmt         *sql.Stmt
	createUserStmt             *sql.Stmt
	deleteApplicationStmt      *sql.Stmt
	deleteCountryStmt          *sql.Stmt
	deleteIdentityProviderStmt *sql.Stmt
	deleteLanguageStmt         *sql.Stmt
	deleteRolesStmt            *sql.Stmt
	deleteTimezoneStmt         *sql.Stmt
	deleteUserStmt             *sql.Stmt
	getApplicationStmt         *sql.Stmt
	getApplicationsStmt        *sql.Stmt
	getCountriesStmt           *sql.Stmt
	getCountryStmt             *sql.Stmt
	getIdentityProviderStmt    *sql.Stmt
	getIdentityProvidersStmt   *sql.Stmt
	getLanguageStmt            *sql.Stmt
	getLanguagesStmt           *sql.Stmt
	getRoleStmt                *sql.Stmt
	getRolesStmt               *sql.Stmt
	getTimezoneStmt            *sql.Stmt
	getTimezonesStmt           *sql.Stmt
	getUserStmt                *sql.Stmt
	getUsersStmt               *sql.Stmt
	updateApplicationStmt      *sql.Stmt
	updateApplicationRoleStmt  *sql.Stmt
	updateCountryStmt          *sql.Stmt
	updateIdentityProviderStmt *sql.Stmt
	updateLanguageStmt         *sql.Stmt
	updateRoleStmt             *sql.Stmt
	updateTimezoneStmt         *sql.Stmt
	updateUserStmt             *sql.Stmt
	updateUserLanguageStmt     *sql.Stmt
	updateUserProviderStmt     *sql.Stmt
	updateUserRoleStmt         *sql.Stmt
	updateUserTimezoneStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		addApplicationRoleStmt:     q.addApplicationRoleStmt,
		addUserLanguageStmt:        q.addUserLanguageStmt,
		addUserProviderStmt:        q.addUserProviderStmt,
		addUserRoleStmt:            q.addUserRoleStmt,
		addUserTimezoneStmt:        q.addUserTimezoneStmt,
		createApplicationStmt:      q.createApplicationStmt,
		createIdentityProviderStmt: q.createIdentityProviderStmt,
		createRoleStmt:             q.createRoleStmt,
		createTimezoneStmt:         q.createTimezoneStmt,
		createUserStmt:             q.createUserStmt,
		deleteApplicationStmt:      q.deleteApplicationStmt,
		deleteCountryStmt:          q.deleteCountryStmt,
		deleteIdentityProviderStmt: q.deleteIdentityProviderStmt,
		deleteLanguageStmt:         q.deleteLanguageStmt,
		deleteRolesStmt:            q.deleteRolesStmt,
		deleteTimezoneStmt:         q.deleteTimezoneStmt,
		deleteUserStmt:             q.deleteUserStmt,
		getApplicationStmt:         q.getApplicationStmt,
		getApplicationsStmt:        q.getApplicationsStmt,
		getCountriesStmt:           q.getCountriesStmt,
		getCountryStmt:             q.getCountryStmt,
		getIdentityProviderStmt:    q.getIdentityProviderStmt,
		getIdentityProvidersStmt:   q.getIdentityProvidersStmt,
		getLanguageStmt:            q.getLanguageStmt,
		getLanguagesStmt:           q.getLanguagesStmt,
		getRoleStmt:                q.getRoleStmt,
		getRolesStmt:               q.getRolesStmt,
		getTimezoneStmt:            q.getTimezoneStmt,
		getTimezonesStmt:           q.getTimezonesStmt,
		getUserStmt:                q.getUserStmt,
		getUsersStmt:               q.getUsersStmt,
		updateApplicationStmt:      q.updateApplicationStmt,
		updateApplicationRoleStmt:  q.updateApplicationRoleStmt,
		updateCountryStmt:          q.updateCountryStmt,
		updateIdentityProviderStmt: q.updateIdentityProviderStmt,
		updateLanguageStmt:         q.updateLanguageStmt,
		updateRoleStmt:             q.updateRoleStmt,
		updateTimezoneStmt:         q.updateTimezoneStmt,
		updateUserStmt:             q.updateUserStmt,
		updateUserLanguageStmt:     q.updateUserLanguageStmt,
		updateUserProviderStmt:     q.updateUserProviderStmt,
		updateUserRoleStmt:         q.updateUserRoleStmt,
		updateUserTimezoneStmt:     q.updateUserTimezoneStmt,
	}
}
