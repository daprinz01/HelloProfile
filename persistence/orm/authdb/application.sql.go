// Code generated by sqlc. DO NOT EDIT.
// source: application.sql

package authdb

import (
	"context"
	"database/sql"
	"time"
)

const addApplicationRole = `-- name: AddApplicationRole :one
insert into applications_roles (
    applications_id, roles_id) 
values ((select a.id from applications a where  a.name = $1), 
(select b.id from roles b where  b.name = $2))
returning id, applications_id, roles_id
`

type AddApplicationRoleParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) AddApplicationRole(ctx context.Context, arg AddApplicationRoleParams) (ApplicationsRole, error) {
	row := q.queryRow(ctx, q.addApplicationRoleStmt, addApplicationRole, arg.Name, arg.Name_2)
	var i ApplicationsRole
	err := row.Scan(&i.ID, &i.ApplicationsID, &i.RolesID)
	return i, err
}

const createApplication = `-- name: CreateApplication :one
insert into applications (
  name,
  "description",
  "created_at",
  "icon_url")
  values($1, $2, $3, $4)
  returning id, name, description, icon_url, created_at
`

type CreateApplicationParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	CreatedAt   time.Time      `json:"created_at"`
	IconUrl     sql.NullString `json:"icon_url"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.queryRow(ctx, q.createApplicationStmt, createApplication,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.IconUrl,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IconUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
delete from applications where name = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, name string) error {
	_, err := q.exec(ctx, q.deleteApplicationStmt, deleteApplication, name)
	return err
}

const getApplication = `-- name: GetApplication :one
select id, name, description, icon_url, created_at from applications where name = $1  limit 1
`

func (q *Queries) GetApplication(ctx context.Context, name string) (Application, error) {
	row := q.queryRow(ctx, q.getApplicationStmt, getApplication, name)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IconUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getApplicationRole = `-- name: GetApplicationRole :one
select id, applications_id, roles_id from applications_roles where roles_id = $1 and applications_id = $2 limit 1
`

type GetApplicationRoleParams struct {
	RolesID        sql.NullInt64 `json:"roles_id"`
	ApplicationsID sql.NullInt64 `json:"applications_id"`
}

func (q *Queries) GetApplicationRole(ctx context.Context, arg GetApplicationRoleParams) (ApplicationsRole, error) {
	row := q.queryRow(ctx, q.getApplicationRoleStmt, getApplicationRole, arg.RolesID, arg.ApplicationsID)
	var i ApplicationsRole
	err := row.Scan(&i.ID, &i.ApplicationsID, &i.RolesID)
	return i, err
}

const getApplications = `-- name: GetApplications :many
select id, name, description, icon_url, created_at from applications
`

func (q *Queries) GetApplications(ctx context.Context) ([]Application, error) {
	rows, err := q.query(ctx, q.getApplicationsStmt, getApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IconUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplication = `-- name: UpdateApplication :one
update applications set name = $1, "description" = $2, created_at = $3, icon_url = $4 
where name = $5
returning id, name, description, icon_url, created_at
`

type UpdateApplicationParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	CreatedAt   time.Time      `json:"created_at"`
	IconUrl     sql.NullString `json:"icon_url"`
	Name_2      string         `json:"name_2"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.queryRow(ctx, q.updateApplicationStmt, updateApplication,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.IconUrl,
		arg.Name_2,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IconUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateApplicationRole = `-- name: UpdateApplicationRole :one
update applications_roles set applications_id = (select a.id from applications a where  a.name = $1 limit 1) , 
roles_id = (select b.id from roles b where  b.name = $2) 
where applications_id = (select c.id from applications c where  c.name = $3 limit 1) 
and roles_id = (select d.id from roles d where  d.name = $4 limit 1) 
returning id, applications_id, roles_id
`

type UpdateApplicationRoleParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
	Name_3 string `json:"name_3"`
	Name_4 string `json:"name_4"`
}

func (q *Queries) UpdateApplicationRole(ctx context.Context, arg UpdateApplicationRoleParams) (ApplicationsRole, error) {
	row := q.queryRow(ctx, q.updateApplicationRoleStmt, updateApplicationRole,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
	)
	var i ApplicationsRole
	err := row.Scan(&i.ID, &i.ApplicationsID, &i.RolesID)
	return i, err
}
