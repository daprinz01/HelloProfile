// Code generated by sqlc. DO NOT EDIT.
// source: application.sql

package authdb

import (
	"context"
	"time"
)

const addApplicationRole = `-- name: AddApplicationRole :one
insert into applications_roles (
    applications_id, roles_id) 
values ((select a.id from applications a where a.id == $1 or a."name" == $1), 
(select b.id from roles b where b.id == $2 or b."name" == $2))
returning id, applications_id, roles_id
`

type AddApplicationRoleParams struct {
	ID   int64 `json:"id"`
	ID_2 int64 `json:"id_2"`
}

func (q *Queries) AddApplicationRole(ctx context.Context, arg AddApplicationRoleParams) (ApplicationsRole, error) {
	row := q.queryRow(ctx, q.addApplicationRoleStmt, addApplicationRole, arg.ID, arg.ID_2)
	var i ApplicationsRole
	err := row.Scan(&i.ID, &i.ApplicationsID, &i.RolesID)
	return i, err
}

const createApplication = `-- name: CreateApplication :one
insert into applications (
  "name",
  "description",
  "created_at")
  values($1, $2, $3)
  returning id, name, description, created_at
`

type CreateApplicationParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.queryRow(ctx, q.createApplicationStmt, createApplication, arg.Name, arg.Description, arg.CreatedAt)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
delete from applications where id == $1 or "name" == $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteApplicationStmt, deleteApplication, id)
	return err
}

const getApplication = `-- name: GetApplication :one
select id, name, description, created_at from applications where id == $1 or "name" == $1 limit 1
`

func (q *Queries) GetApplication(ctx context.Context, id int64) (Application, error) {
	row := q.queryRow(ctx, q.getApplicationStmt, getApplication, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getApplications = `-- name: GetApplications :many
select id, name, description, created_at from applications
`

func (q *Queries) GetApplications(ctx context.Context) ([]Application, error) {
	rows, err := q.query(ctx, q.getApplicationsStmt, getApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplication = `-- name: UpdateApplication :one
update applications set "name" = $1, "description" = $2, created_at = $3 
where "name" == $4
returning id, name, description, created_at
`

type UpdateApplicationParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
	Name_2      string    `json:"name_2"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.queryRow(ctx, q.updateApplicationStmt, updateApplication,
		arg.Name,
		arg.Description,
		arg.CreatedAt,
		arg.Name_2,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateApplicationRole = `-- name: UpdateApplicationRole :one
update applications_roles set applications_id = (select a.id from applications a where a.id == $1 or a."name" == $1 limit 1) , 
roles_id = (select b.id from roles b where b.id == $2 or b."name" == $2) 
where applications_id == (select c.id from applications c where c.id == $3 or c."name" == $3 limit 1) 
and roles_id == (select d.id from roles d where d.id == $4 or d.name == $4 limit 1) 
returning id, applications_id, roles_id
`

type UpdateApplicationRoleParams struct {
	ID   int64 `json:"id"`
	ID_2 int64 `json:"id_2"`
	ID_3 int64 `json:"id_3"`
	ID_4 int64 `json:"id_4"`
}

func (q *Queries) UpdateApplicationRole(ctx context.Context, arg UpdateApplicationRoleParams) (ApplicationsRole, error) {
	row := q.queryRow(ctx, q.updateApplicationRoleStmt, updateApplicationRole,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
		arg.ID_4,
	)
	var i ApplicationsRole
	err := row.Scan(&i.ID, &i.ApplicationsID, &i.RolesID)
	return i, err
}
