// Code generated by sqlc. DO NOT EDIT.
// source: states.sql

package authdb

import (
	"context"
)

const createState = `-- name: CreateState :exec
insert into states (
    name,
    country_id
)
values(
    $1,
    (select a.Id from countries a where a.name = $2)
)
`

type CreateStateParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) CreateState(ctx context.Context, arg CreateStateParams) error {
	_, err := q.exec(ctx, q.createStateStmt, createState, arg.Name, arg.Name_2)
	return err
}

const deleteState = `-- name: DeleteState :exec
delete from states where name = $1
`

func (q *Queries) DeleteState(ctx context.Context, name string) error {
	_, err := q.exec(ctx, q.deleteStateStmt, deleteState, name)
	return err
}

const getState = `-- name: GetState :one
select id, name, country_id from states where name = $1
`

func (q *Queries) GetState(ctx context.Context, name string) (State, error) {
	row := q.queryRow(ctx, q.getStateStmt, getState, name)
	var i State
	err := row.Scan(&i.ID, &i.Name, &i.CountryID)
	return i, err
}

const getStates = `-- name: GetStates :many
select id, name, country_id from states
`

func (q *Queries) GetStates(ctx context.Context) ([]State, error) {
	rows, err := q.query(ctx, q.getStatesStmt, getStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(&i.ID, &i.Name, &i.CountryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatesByCountry = `-- name: GetStatesByCountry :many
select id, name, country_id from states a where a.country_id = (select b.id from countries b where b.name = $1)
`

func (q *Queries) GetStatesByCountry(ctx context.Context, name string) ([]State, error) {
	rows, err := q.query(ctx, q.getStatesByCountryStmt, getStatesByCountry, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(&i.ID, &i.Name, &i.CountryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateState = `-- name: UpdateState :exec
update states set name = $1 where name = $2
`

type UpdateStateParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) UpdateState(ctx context.Context, arg UpdateStateParams) error {
	_, err := q.exec(ctx, q.updateStateStmt, updateState, arg.Name, arg.Name_2)
	return err
}
