// Code generated by sqlc. DO NOT EDIT.
// source: timezones.sql

package authdb

import (
	"context"
)

const createTimezone = `-- name: CreateTimezone :one
insert into timezones (name, "zone")
values ($1, $2)
returning id, name, zone
`

type CreateTimezoneParams struct {
	Name string `json:"name"`
	Zone string `json:"zone"`
}

func (q *Queries) CreateTimezone(ctx context.Context, arg CreateTimezoneParams) (Timezone, error) {
	row := q.queryRow(ctx, q.createTimezoneStmt, createTimezone, arg.Name, arg.Zone)
	var i Timezone
	err := row.Scan(&i.ID, &i.Name, &i.Zone)
	return i, err
}

const deleteTimezone = `-- name: DeleteTimezone :exec
delete from timezones where name = $1
`

func (q *Queries) DeleteTimezone(ctx context.Context, name string) error {
	_, err := q.exec(ctx, q.deleteTimezoneStmt, deleteTimezone, name)
	return err
}

const getTimezone = `-- name: GetTimezone :one
select id, name, zone from timezones where 
name = $1 limit 1
`

func (q *Queries) GetTimezone(ctx context.Context, name string) (Timezone, error) {
	row := q.queryRow(ctx, q.getTimezoneStmt, getTimezone, name)
	var i Timezone
	err := row.Scan(&i.ID, &i.Name, &i.Zone)
	return i, err
}

const getTimezones = `-- name: GetTimezones :many
select id, name, zone from timezones
`

func (q *Queries) GetTimezones(ctx context.Context) ([]Timezone, error) {
	rows, err := q.query(ctx, q.getTimezonesStmt, getTimezones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Timezone
	for rows.Next() {
		var i Timezone
		if err := rows.Scan(&i.ID, &i.Name, &i.Zone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimezone = `-- name: UpdateTimezone :one
update timezones set name = $1, "zone" = $2 where name = $3
returning id, name, zone
`

type UpdateTimezoneParams struct {
	Name   string `json:"name"`
	Zone   string `json:"zone"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) UpdateTimezone(ctx context.Context, arg UpdateTimezoneParams) (Timezone, error) {
	row := q.queryRow(ctx, q.updateTimezoneStmt, updateTimezone, arg.Name, arg.Zone, arg.Name_2)
	var i Timezone
	err := row.Scan(&i.ID, &i.Name, &i.Zone)
	return i, err
}
