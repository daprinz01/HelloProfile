// Code generated by sqlc. DO NOT EDIT.
// source: emailVerification.sql

package authdb

import (
	"context"
	"database/sql"
)

const createEmailVerification = `-- name: CreateEmailVerification :exec
insert into email_verification(
    email, otp
) values ($1, $2)
`

type CreateEmailVerificationParams struct {
	Email sql.NullString `json:"email"`
	Otp   string         `json:"otp"`
}

func (q *Queries) CreateEmailVerification(ctx context.Context, arg CreateEmailVerificationParams) error {
	_, err := q.exec(ctx, q.createEmailVerificationStmt, createEmailVerification, arg.Email, arg.Otp)
	return err
}

const deleteEmailVerification = `-- name: DeleteEmailVerification :exec
delete from email_verification where otp=$1
`

func (q *Queries) DeleteEmailVerification(ctx context.Context, otp string) error {
	_, err := q.exec(ctx, q.deleteEmailVerificationStmt, deleteEmailVerification, otp)
	return err
}

const getEmailVerification = `-- name: GetEmailVerification :one
select id, email, otp, created_at from email_verification where otp=$1
`

func (q *Queries) GetEmailVerification(ctx context.Context, otp string) (EmailVerification, error) {
	row := q.queryRow(ctx, q.getEmailVerificationStmt, getEmailVerification, otp)
	var i EmailVerification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Otp,
		&i.CreatedAt,
	)
	return i, err
}

const getEmailVerifications = `-- name: GetEmailVerifications :many
select id, email, otp, created_at from email_verification
`

func (q *Queries) GetEmailVerifications(ctx context.Context) ([]EmailVerification, error) {
	rows, err := q.query(ctx, q.getEmailVerificationsStmt, getEmailVerifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EmailVerification
	for rows.Next() {
		var i EmailVerification
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Otp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
