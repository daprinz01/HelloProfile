// Code generated by sqlc. DO NOT EDIT.
// source: countries.sql

package authdb

import (
	"context"
	"database/sql"
)

const createCountry = `-- name: CreateCountry :one
insert into countries (name, "flag_image_url", country_code)
values ($1, $2, $3)
returning id, name, flag_image_url, country_code
`

type CreateCountryParams struct {
	Name         string         `json:"name"`
	FlagImageUrl sql.NullString `json:"flag_image_url"`
	CountryCode  sql.NullString `json:"country_code"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.queryRow(ctx, q.createCountryStmt, createCountry, arg.Name, arg.FlagImageUrl, arg.CountryCode)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FlagImageUrl,
		&i.CountryCode,
	)
	return i, err
}

const deleteCountry = `-- name: DeleteCountry :exec
delete from countries where name = $1  or flag_image_url = $1 or country_code = $1
`

func (q *Queries) DeleteCountry(ctx context.Context, name string) error {
	_, err := q.exec(ctx, q.deleteCountryStmt, deleteCountry, name)
	return err
}

const getCountries = `-- name: GetCountries :many
select id, name, flag_image_url, country_code from countries
`

func (q *Queries) GetCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.query(ctx, q.getCountriesStmt, getCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FlagImageUrl,
			&i.CountryCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountry = `-- name: GetCountry :one
select id, name, flag_image_url, country_code from countries where name = $1  limit 1
`

func (q *Queries) GetCountry(ctx context.Context, name string) (Country, error) {
	row := q.queryRow(ctx, q.getCountryStmt, getCountry, name)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FlagImageUrl,
		&i.CountryCode,
	)
	return i, err
}

const updateCountry = `-- name: UpdateCountry :one
update countries set name = $1, flag_image_url = $2, country_code= $4  where name = $3
returning id, name, flag_image_url, country_code
`

type UpdateCountryParams struct {
	Name         string         `json:"name"`
	FlagImageUrl sql.NullString `json:"flag_image_url"`
	Name_2       string         `json:"name_2"`
	CountryCode  sql.NullString `json:"country_code"`
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) (Country, error) {
	row := q.queryRow(ctx, q.updateCountryStmt, updateCountry,
		arg.Name,
		arg.FlagImageUrl,
		arg.Name_2,
		arg.CountryCode,
	)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.FlagImageUrl,
		&i.CountryCode,
	)
	return i, err
}
