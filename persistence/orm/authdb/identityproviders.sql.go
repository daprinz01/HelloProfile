// Code generated by sqlc. DO NOT EDIT.
// source: identityproviders.sql

package authdb

import (
	"context"
)

const createIdentityProvider = `-- name: CreateIdentityProvider :one
insert into identity_providers (
  "name",
  "client_id",
  "client_secret",
  "image_url")
  values($1, $2, $3, $4)
  returning id, name, client_id, client_secret, image_url
`

type CreateIdentityProviderParams struct {
	Name         string `json:"name"`
	ClientID     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	ImageUrl     string `json:"image_url"`
}

func (q *Queries) CreateIdentityProvider(ctx context.Context, arg CreateIdentityProviderParams) (IdentityProvider, error) {
	row := q.queryRow(ctx, q.createIdentityProviderStmt, createIdentityProvider,
		arg.Name,
		arg.ClientID,
		arg.ClientSecret,
		arg.ImageUrl,
	)
	var i IdentityProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.ImageUrl,
	)
	return i, err
}

const deleteIdentityProvider = `-- name: DeleteIdentityProvider :exec
delete from identity_providers where id == $1 or "name" == $1
`

func (q *Queries) DeleteIdentityProvider(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteIdentityProviderStmt, deleteIdentityProvider, id)
	return err
}

const getIdentityProvider = `-- name: GetIdentityProvider :one
select id, name, client_id, client_secret, image_url from identity_providers where id == $1 or "name" == $1 limit 1
`

func (q *Queries) GetIdentityProvider(ctx context.Context, id int64) (IdentityProvider, error) {
	row := q.queryRow(ctx, q.getIdentityProviderStmt, getIdentityProvider, id)
	var i IdentityProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.ImageUrl,
	)
	return i, err
}

const getIdentityProviders = `-- name: GetIdentityProviders :many
select id, name, client_id, client_secret, image_url from identity_providers
`

func (q *Queries) GetIdentityProviders(ctx context.Context) ([]IdentityProvider, error) {
	rows, err := q.query(ctx, q.getIdentityProvidersStmt, getIdentityProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IdentityProvider
	for rows.Next() {
		var i IdentityProvider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ClientID,
			&i.ClientSecret,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIdentityProvider = `-- name: UpdateIdentityProvider :one
update identity_providers set "name" = $1, "client_id" = $2, client_secret = $3, image_url = $4 where "name" == $5
returning id, name, client_id, client_secret, image_url
`

type UpdateIdentityProviderParams struct {
	Name         string `json:"name"`
	ClientID     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	ImageUrl     string `json:"image_url"`
	Name_2       string `json:"name_2"`
}

func (q *Queries) UpdateIdentityProvider(ctx context.Context, arg UpdateIdentityProviderParams) (IdentityProvider, error) {
	row := q.queryRow(ctx, q.updateIdentityProviderStmt, updateIdentityProvider,
		arg.Name,
		arg.ClientID,
		arg.ClientSecret,
		arg.ImageUrl,
		arg.Name_2,
	)
	var i IdentityProvider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientID,
		&i.ClientSecret,
		&i.ImageUrl,
	)
	return i, err
}
