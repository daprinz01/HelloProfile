// Code generated by sqlc. DO NOT EDIT.
// source: savedProfiles.sql

package helloprofiledb

import (
	"context"

	"github.com/google/uuid"
)

const createSavedProfile = `-- name: CreateSavedProfile :one
insert into saved_profiles (first_name, last_name, email, is_added, profile_id)
values ($1, $2, $3, $4, $5)
returning id, profile_id, first_name, last_name, email, is_added
`

type CreateSavedProfileParams struct {
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	IsAdded   bool      `json:"is_added"`
	ProfileID uuid.UUID `json:"profile_id"`
}

func (q *Queries) CreateSavedProfile(ctx context.Context, arg CreateSavedProfileParams) (SavedProfile, error) {
	row := q.queryRow(ctx, q.createSavedProfileStmt, createSavedProfile,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsAdded,
		arg.ProfileID,
	)
	var i SavedProfile
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdded,
	)
	return i, err
}

const deleteSavedProfile = `-- name: DeleteSavedProfile :exec
delete from saved_profiles where id = $1
`

func (q *Queries) DeleteSavedProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteSavedProfileStmt, deleteSavedProfile, id)
	return err
}

const deleteSavedProfiles = `-- name: DeleteSavedProfiles :exec
delete from saved_profiles where profile_id=$1
`

func (q *Queries) DeleteSavedProfiles(ctx context.Context, profileID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteSavedProfilesStmt, deleteSavedProfiles, profileID)
	return err
}

const getSavedProfile = `-- name: GetSavedProfile :one
select id, profile_id, first_name, last_name, email, is_added from saved_profiles where 
id = $1  limit 1
`

func (q *Queries) GetSavedProfile(ctx context.Context, id uuid.UUID) (SavedProfile, error) {
	row := q.queryRow(ctx, q.getSavedProfileStmt, getSavedProfile, id)
	var i SavedProfile
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdded,
	)
	return i, err
}

const getSavedProfiles = `-- name: GetSavedProfiles :many
select id, profile_id, first_name, last_name, email, is_added from saved_profiles
`

func (q *Queries) GetSavedProfiles(ctx context.Context) ([]SavedProfile, error) {
	rows, err := q.query(ctx, q.getSavedProfilesStmt, getSavedProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedProfile
	for rows.Next() {
		var i SavedProfile
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsAdded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSavedProfilesByEmail = `-- name: GetSavedProfilesByEmail :many
select id, profile_id, first_name, last_name, email, is_added from saved_profiles where email=$1 and is_added = $2
`

type GetSavedProfilesByEmailParams struct {
	Email   string `json:"email"`
	IsAdded bool   `json:"is_added"`
}

func (q *Queries) GetSavedProfilesByEmail(ctx context.Context, arg GetSavedProfilesByEmailParams) ([]SavedProfile, error) {
	rows, err := q.query(ctx, q.getSavedProfilesByEmailStmt, getSavedProfilesByEmail, arg.Email, arg.IsAdded)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedProfile
	for rows.Next() {
		var i SavedProfile
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsAdded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSavedProfilesByProfileId = `-- name: GetSavedProfilesByProfileId :many
select id, profile_id, first_name, last_name, email, is_added from saved_profiles where profile_id = $1 and is_added = $2
`

type GetSavedProfilesByProfileIdParams struct {
	ProfileID uuid.UUID `json:"profile_id"`
	IsAdded   bool      `json:"is_added"`
}

func (q *Queries) GetSavedProfilesByProfileId(ctx context.Context, arg GetSavedProfilesByProfileIdParams) ([]SavedProfile, error) {
	rows, err := q.query(ctx, q.getSavedProfilesByProfileIdStmt, getSavedProfilesByProfileId, arg.ProfileID, arg.IsAdded)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedProfile
	for rows.Next() {
		var i SavedProfile
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsAdded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSavedProfile = `-- name: UpdateSavedProfile :one
update saved_profiles set first_name = $1, last_name = $2, is_added = $3 where id = $3
returning id, profile_id, first_name, last_name, email, is_added
`

type UpdateSavedProfileParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	IsAdded   bool   `json:"is_added"`
}

func (q *Queries) UpdateSavedProfile(ctx context.Context, arg UpdateSavedProfileParams) (SavedProfile, error) {
	row := q.queryRow(ctx, q.updateSavedProfileStmt, updateSavedProfile, arg.FirstName, arg.LastName, arg.IsAdded)
	var i SavedProfile
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsAdded,
	)
	return i, err
}
