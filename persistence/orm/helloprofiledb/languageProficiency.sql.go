// Code generated by sqlc. DO NOT EDIT.
// source: languageProficiency.sql

package helloprofiledb

import (
	"context"
	"database/sql"
)

const createLanguageProficiency = `-- name: CreateLanguageProficiency :one
insert into language_proficiency (proficiency) values ($1)
returning id, proficiency
`

func (q *Queries) CreateLanguageProficiency(ctx context.Context, proficiency sql.NullString) (LanguageProficiency, error) {
	row := q.queryRow(ctx, q.createLanguageProficiencyStmt, createLanguageProficiency, proficiency)
	var i LanguageProficiency
	err := row.Scan(&i.ID, &i.Proficiency)
	return i, err
}

const deleteLanguageProficiency = `-- name: DeleteLanguageProficiency :exec
delete from language_proficiency where proficiency = $1
`

func (q *Queries) DeleteLanguageProficiency(ctx context.Context, proficiency sql.NullString) error {
	_, err := q.exec(ctx, q.deleteLanguageProficiencyStmt, deleteLanguageProficiency, proficiency)
	return err
}

const getLanguageProficiencies = `-- name: GetLanguageProficiencies :many
select id, proficiency from language_proficiency
`

func (q *Queries) GetLanguageProficiencies(ctx context.Context) ([]LanguageProficiency, error) {
	rows, err := q.query(ctx, q.getLanguageProficienciesStmt, getLanguageProficiencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LanguageProficiency
	for rows.Next() {
		var i LanguageProficiency
		if err := rows.Scan(&i.ID, &i.Proficiency); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLanguageProficiency = `-- name: GetLanguageProficiency :one
select id, proficiency from language_proficiency where proficiency = $1  limit 1
`

func (q *Queries) GetLanguageProficiency(ctx context.Context, proficiency sql.NullString) (LanguageProficiency, error) {
	row := q.queryRow(ctx, q.getLanguageProficiencyStmt, getLanguageProficiency, proficiency)
	var i LanguageProficiency
	err := row.Scan(&i.ID, &i.Proficiency)
	return i, err
}

const updateLanguageProficiency = `-- name: UpdateLanguageProficiency :one
update language_proficiency set proficiency = $1 where proficiency = $2
returning id, proficiency
`

type UpdateLanguageProficiencyParams struct {
	Proficiency   sql.NullString `json:"proficiency"`
	Proficiency_2 sql.NullString `json:"proficiency_2"`
}

func (q *Queries) UpdateLanguageProficiency(ctx context.Context, arg UpdateLanguageProficiencyParams) (LanguageProficiency, error) {
	row := q.queryRow(ctx, q.updateLanguageProficiencyStmt, updateLanguageProficiency, arg.Proficiency, arg.Proficiency_2)
	var i LanguageProficiency
	err := row.Scan(&i.ID, &i.Proficiency)
	return i, err
}
