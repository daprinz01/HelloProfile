// Code generated by sqlc. DO NOT EDIT.
// source: otp.sql

package helloprofiledb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOtp = `-- name: CreateOtp :exec
insert into otp (
    user_id,
    otp_token,
    is_sms_preferred,
    is_email_preferred,
    purpose
)
values ($1, $2, $3, $4, $5)
`

type CreateOtpParams struct {
	UserID           uuid.UUID      `json:"user_id"`
	OtpToken         sql.NullString `json:"otp_token"`
	IsSmsPreferred   bool           `json:"is_sms_preferred"`
	IsEmailPreferred bool           `json:"is_email_preferred"`
	Purpose          sql.NullString `json:"purpose"`
}

func (q *Queries) CreateOtp(ctx context.Context, arg CreateOtpParams) error {
	_, err := q.exec(ctx, q.createOtpStmt, createOtp,
		arg.UserID,
		arg.OtpToken,
		arg.IsSmsPreferred,
		arg.IsEmailPreferred,
		arg.Purpose,
	)
	return err
}

const deleteOtp = `-- name: DeleteOtp :exec
delete from otp where user_id = $1 and otp_token = $2
`

type DeleteOtpParams struct {
	UserID   uuid.UUID      `json:"user_id"`
	OtpToken sql.NullString `json:"otp_token"`
}

func (q *Queries) DeleteOtp(ctx context.Context, arg DeleteOtpParams) error {
	_, err := q.exec(ctx, q.deleteOtpStmt, deleteOtp, arg.UserID, arg.OtpToken)
	return err
}

const getAllOtp = `-- name: GetAllOtp :many
select id, user_id, otp_token, created_at, is_sms_preferred, is_email_preferred, purpose from otp
`

func (q *Queries) GetAllOtp(ctx context.Context) ([]Otp, error) {
	rows, err := q.query(ctx, q.getAllOtpStmt, getAllOtp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Otp
	for rows.Next() {
		var i Otp
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OtpToken,
			&i.CreatedAt,
			&i.IsSmsPreferred,
			&i.IsEmailPreferred,
			&i.Purpose,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOtp = `-- name: GetOtp :one
select id, user_id, otp_token, created_at, is_sms_preferred, is_email_preferred, purpose from otp where user_id = (select a.Id from users a where a.username = $1 or email = $1) and otp_token = $2
`

type GetOtpParams struct {
	Username sql.NullString `json:"username"`
	OtpToken sql.NullString `json:"otp_token"`
}

func (q *Queries) GetOtp(ctx context.Context, arg GetOtpParams) (Otp, error) {
	row := q.queryRow(ctx, q.getOtpStmt, getOtp, arg.Username, arg.OtpToken)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpToken,
		&i.CreatedAt,
		&i.IsSmsPreferred,
		&i.IsEmailPreferred,
		&i.Purpose,
	)
	return i, err
}
