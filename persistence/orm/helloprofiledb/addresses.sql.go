// Code generated by sqlc. DO NOT EDIT.
// source: addresses.sql

package helloprofiledb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addAddress = `-- name: AddAddress :one
INSERT INTO addresses (user_id, street, city, state, country)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    id, user_id, street, city, state, country, isprimaryaddress
`

type AddAddressParams struct {
	UserID  uuid.NullUUID  `json:"user_id"`
	Street  string         `json:"street"`
	City    string         `json:"city"`
	State   sql.NullString `json:"state"`
	Country sql.NullString `json:"country"`
}

func (q *Queries) AddAddress(ctx context.Context, arg AddAddressParams) (Address, error) {
	row := q.queryRow(ctx, q.addAddressStmt, addAddress,
		arg.UserID,
		arg.Street,
		arg.City,
		arg.State,
		arg.Country,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Street,
		&i.City,
		&i.State,
		&i.Country,
		&i.Isprimaryaddress,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM addresses
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteAddressStmt, deleteAddress, id)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT
    id, user_id, street, city, state, country, isprimaryaddress
FROM
    addresses
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, id uuid.UUID) (Address, error) {
	row := q.queryRow(ctx, q.getAddressStmt, getAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Street,
		&i.City,
		&i.State,
		&i.Country,
		&i.Isprimaryaddress,
	)
	return i, err
}

const getAllAddresses = `-- name: GetAllAddresses :many
SELECT
    id, user_id, street, city, state, country, isprimaryaddress
FROM
    addresses
`

func (q *Queries) GetAllAddresses(ctx context.Context) ([]Address, error) {
	rows, err := q.query(ctx, q.getAllAddressesStmt, getAllAddresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Street,
			&i.City,
			&i.State,
			&i.Country,
			&i.Isprimaryaddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrimaryAddress = `-- name: GetPrimaryAddress :one
SELECT
    id, user_id, street, city, state, country, isprimaryaddress
FROM
    addresses
WHERE
    user_id = $1
    AND isPrimaryAddress IS TRUE
LIMIT 1
`

func (q *Queries) GetPrimaryAddress(ctx context.Context, userID uuid.NullUUID) (Address, error) {
	row := q.queryRow(ctx, q.getPrimaryAddressStmt, getPrimaryAddress, userID)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Street,
		&i.City,
		&i.State,
		&i.Country,
		&i.Isprimaryaddress,
	)
	return i, err
}

const getUserAddresses = `-- name: GetUserAddresses :many
SELECT
    id, user_id, street, city, state, country, isprimaryaddress
FROM
    addresses
WHERE
    user_id = $1
`

func (q *Queries) GetUserAddresses(ctx context.Context, userID uuid.NullUUID) ([]Address, error) {
	rows, err := q.query(ctx, q.getUserAddressesStmt, getUserAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Street,
			&i.City,
			&i.State,
			&i.Country,
			&i.Isprimaryaddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE
    addresses
SET
    street = $2,
    city = $3,
    state = $4,
    country = $5
WHERE
    id = $1
`

type UpdateAddressParams struct {
	ID      uuid.UUID      `json:"id"`
	Street  string         `json:"street"`
	City    string         `json:"city"`
	State   sql.NullString `json:"state"`
	Country sql.NullString `json:"country"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.exec(ctx, q.updateAddressStmt, updateAddress,
		arg.ID,
		arg.Street,
		arg.City,
		arg.State,
		arg.Country,
	)
	return err
}
