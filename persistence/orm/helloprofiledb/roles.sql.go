// Code generated by sqlc. DO NOT EDIT.
// source: roles.sql

package helloprofiledb

import (
	"context"
)

const createRole = `-- name: CreateRole :one
insert into roles (name, "description")
values ($1, $2)
returning id, name, description
`

type CreateRoleParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.queryRow(ctx, q.createRoleStmt, createRole, arg.Name, arg.Description)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteRoles = `-- name: DeleteRoles :exec
delete from roles where name = $1
`

func (q *Queries) DeleteRoles(ctx context.Context, name string) error {
	_, err := q.exec(ctx, q.deleteRolesStmt, deleteRoles, name)
	return err
}

const getRole = `-- name: GetRole :one
select id, name, description from roles where 
name = $1  limit 1
`

func (q *Queries) GetRole(ctx context.Context, name string) (Role, error) {
	row := q.queryRow(ctx, q.getRoleStmt, getRole, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getRoles = `-- name: GetRoles :many
select id, name, description from roles
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.query(ctx, q.getRolesStmt, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
update roles set name = $1, "description" = $2 where name = $3
returning id, name, description
`

type UpdateRoleParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Name_2      string `json:"name_2"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.queryRow(ctx, q.updateRoleStmt, updateRole, arg.Name, arg.Description, arg.Name_2)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
