// Code generated by sqlc. DO NOT EDIT.
// source: profiles.sql

package helloprofiledb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addProfile = `-- name: AddProfile :one
insert into profiles(
    user_id,
    status,
    profile_name,
    fullname,
    title,
    bio,
    company,
    company_address,
    image_url,
    phone,
    email,
    address_id,
    website,
    is_default,
    color
) VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
)
returning id, user_id, status, profile_name, fullname, title, bio, company, company_address, image_url, phone, email, address_id, website, is_default, color
`

type AddProfileParams struct {
	UserID         uuid.UUID      `json:"user_id"`
	Status         bool           `json:"status"`
	ProfileName    string         `json:"profile_name"`
	Fullname       string         `json:"fullname"`
	Title          string         `json:"title"`
	Bio            string         `json:"bio"`
	Company        string         `json:"company"`
	CompanyAddress string         `json:"company_address"`
	ImageUrl       sql.NullString `json:"image_url"`
	Phone          string         `json:"phone"`
	Email          string         `json:"email"`
	AddressID      uuid.NullUUID  `json:"address_id"`
	Website        sql.NullString `json:"website"`
	IsDefault      bool           `json:"is_default"`
	Color          sql.NullInt32  `json:"color"`
}

func (q *Queries) AddProfile(ctx context.Context, arg AddProfileParams) (Profile, error) {
	row := q.queryRow(ctx, q.addProfileStmt, addProfile,
		arg.UserID,
		arg.Status,
		arg.ProfileName,
		arg.Fullname,
		arg.Title,
		arg.Bio,
		arg.Company,
		arg.CompanyAddress,
		arg.ImageUrl,
		arg.Phone,
		arg.Email,
		arg.AddressID,
		arg.Website,
		arg.IsDefault,
		arg.Color,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.ProfileName,
		&i.Fullname,
		&i.Title,
		&i.Bio,
		&i.Company,
		&i.CompanyAddress,
		&i.ImageUrl,
		&i.Phone,
		&i.Email,
		&i.AddressID,
		&i.Website,
		&i.IsDefault,
		&i.Color,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
delete from profiles where id=$1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteProfileStmt, deleteProfile, id)
	return err
}

const getAllProfiles = `-- name: GetAllProfiles :many
select id, user_id, status, profile_name, fullname, title, bio, company, company_address, image_url, phone, email, address_id, website, is_default, color from profiles
`

func (q *Queries) GetAllProfiles(ctx context.Context) ([]Profile, error) {
	rows, err := q.query(ctx, q.getAllProfilesStmt, getAllProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.ProfileName,
			&i.Fullname,
			&i.Title,
			&i.Bio,
			&i.Company,
			&i.CompanyAddress,
			&i.ImageUrl,
			&i.Phone,
			&i.Email,
			&i.AddressID,
			&i.Website,
			&i.IsDefault,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfile = `-- name: GetProfile :one
select id, user_id, status, profile_name, fullname, title, bio, company, company_address, image_url, phone, email, address_id, website, is_default, color from profiles where id=$1 limit 1
`

func (q *Queries) GetProfile(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.queryRow(ctx, q.getProfileStmt, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.ProfileName,
		&i.Fullname,
		&i.Title,
		&i.Bio,
		&i.Company,
		&i.CompanyAddress,
		&i.ImageUrl,
		&i.Phone,
		&i.Email,
		&i.AddressID,
		&i.Website,
		&i.IsDefault,
		&i.Color,
	)
	return i, err
}

const getProfiles = `-- name: GetProfiles :many
select id, user_id, status, profile_name, fullname, title, bio, company, company_address, image_url, phone, email, address_id, website, is_default, color from profiles where user_id=$1
`

func (q *Queries) GetProfiles(ctx context.Context, userID uuid.UUID) ([]Profile, error) {
	rows, err := q.query(ctx, q.getProfilesStmt, getProfiles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.ProfileName,
			&i.Fullname,
			&i.Title,
			&i.Bio,
			&i.Company,
			&i.CompanyAddress,
			&i.ImageUrl,
			&i.Phone,
			&i.Email,
			&i.AddressID,
			&i.Website,
			&i.IsDefault,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :exec
update profiles set
    status = $1,
    profile_name = $2,
    fullname = $3,
    title = $4,
    bio = $5,
    company = $6,
    company_address = $7,
    image_url = $8,
    phone = $9,
    email = $10,
    address_id = $11,
    website = $12,
    is_default = $13,
    color = $14 where id=$15
`

type UpdateProfileParams struct {
	Status         bool           `json:"status"`
	ProfileName    string         `json:"profile_name"`
	Fullname       string         `json:"fullname"`
	Title          string         `json:"title"`
	Bio            string         `json:"bio"`
	Company        string         `json:"company"`
	CompanyAddress string         `json:"company_address"`
	ImageUrl       sql.NullString `json:"image_url"`
	Phone          string         `json:"phone"`
	Email          string         `json:"email"`
	AddressID      uuid.NullUUID  `json:"address_id"`
	Website        sql.NullString `json:"website"`
	IsDefault      bool           `json:"is_default"`
	Color          sql.NullInt32  `json:"color"`
	ID             uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.exec(ctx, q.updateProfileStmt, updateProfile,
		arg.Status,
		arg.ProfileName,
		arg.Fullname,
		arg.Title,
		arg.Bio,
		arg.Company,
		arg.CompanyAddress,
		arg.ImageUrl,
		arg.Phone,
		arg.Email,
		arg.AddressID,
		arg.Website,
		arg.IsDefault,
		arg.Color,
		arg.ID,
	)
	return err
}
