// Code generated by sqlc. DO NOT EDIT.
// source: profiles.sql

package helloprofiledb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addProfile = `-- name: AddProfile :one
insert into profiles(
    user_id,
    "status",
    profile_name,
    basic_block_id,
    contact_block_id,
    page_color,
    font,
    is_default
) VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8
)
returning id, user_id, basic_block_id, contact_block_id, status, profile_name, page_color, font, url, is_default
`

type AddProfileParams struct {
	UserID         uuid.UUID     `json:"user_id"`
	Status         bool          `json:"status"`
	ProfileName    string        `json:"profile_name"`
	BasicBlockID   uuid.NullUUID `json:"basic_block_id"`
	ContactBlockID uuid.NullUUID `json:"contact_block_id"`
	PageColor      string        `json:"page_color"`
	Font           string        `json:"font"`
	IsDefault      bool          `json:"is_default"`
}

func (q *Queries) AddProfile(ctx context.Context, arg AddProfileParams) (Profile, error) {
	row := q.queryRow(ctx, q.addProfileStmt, addProfile,
		arg.UserID,
		arg.Status,
		arg.ProfileName,
		arg.BasicBlockID,
		arg.ContactBlockID,
		arg.PageColor,
		arg.Font,
		arg.IsDefault,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BasicBlockID,
		&i.ContactBlockID,
		&i.Status,
		&i.ProfileName,
		&i.PageColor,
		&i.Font,
		&i.Url,
		&i.IsDefault,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
delete from profiles where id=$1
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteProfileStmt, deleteProfile, id)
	return err
}

const getAllProfiles = `-- name: GetAllProfiles :many
select id, user_id, basic_block_id, contact_block_id, status, profile_name, page_color, font, url, is_default from profiles
`

func (q *Queries) GetAllProfiles(ctx context.Context) ([]Profile, error) {
	rows, err := q.query(ctx, q.getAllProfilesStmt, getAllProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BasicBlockID,
			&i.ContactBlockID,
			&i.Status,
			&i.ProfileName,
			&i.PageColor,
			&i.Font,
			&i.Url,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefaultProfile = `-- name: GetDefaultProfile :one
select id, user_id, basic_block_id, contact_block_id, status, profile_name, page_color, font, url, is_default from profiles where is_default = TRUE and user_id=$1 limit 1
`

func (q *Queries) GetDefaultProfile(ctx context.Context, userID uuid.UUID) (Profile, error) {
	row := q.queryRow(ctx, q.getDefaultProfileStmt, getDefaultProfile, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BasicBlockID,
		&i.ContactBlockID,
		&i.Status,
		&i.ProfileName,
		&i.PageColor,
		&i.Font,
		&i.Url,
		&i.IsDefault,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
select id, user_id, basic_block_id, contact_block_id, status, profile_name, page_color, font, url, is_default from profiles where id=$1 limit 1
`

func (q *Queries) GetProfile(ctx context.Context, id uuid.UUID) (Profile, error) {
	row := q.queryRow(ctx, q.getProfileStmt, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BasicBlockID,
		&i.ContactBlockID,
		&i.Status,
		&i.ProfileName,
		&i.PageColor,
		&i.Font,
		&i.Url,
		&i.IsDefault,
	)
	return i, err
}

const getProfileIdByProfileUrl = `-- name: GetProfileIdByProfileUrl :one
select id from profiles where "url"=$1 limit 1
`

func (q *Queries) GetProfileIdByProfileUrl(ctx context.Context, url sql.NullString) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.getProfileIdByProfileUrlStmt, getProfileIdByProfileUrl, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getProfiles = `-- name: GetProfiles :many
select id, user_id, basic_block_id, contact_block_id, status, profile_name, page_color, font, url, is_default from profiles where user_id=$1
`

func (q *Queries) GetProfiles(ctx context.Context, userID uuid.UUID) ([]Profile, error) {
	rows, err := q.query(ctx, q.getProfilesStmt, getProfiles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BasicBlockID,
			&i.ContactBlockID,
			&i.Status,
			&i.ProfileName,
			&i.PageColor,
			&i.Font,
			&i.Url,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isProfileExist = `-- name: IsProfileExist :one
select exists(select 1 from profiles where id=$1) AS "exists"
`

func (q *Queries) IsProfileExist(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.queryRow(ctx, q.isProfileExistStmt, isProfileExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isUrlExists = `-- name: IsUrlExists :one
select exists(select 1 from profiles where "url"=$1) AS "exists"
`

func (q *Queries) IsUrlExists(ctx context.Context, url sql.NullString) (bool, error) {
	row := q.queryRow(ctx, q.isUrlExistsStmt, isUrlExists, url)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const resetOtherDefaultProfiles = `-- name: ResetOtherDefaultProfiles :exec
update profiles set is_default = FALSE where user_id=$1 and id != $2
`

type ResetOtherDefaultProfilesParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) ResetOtherDefaultProfiles(ctx context.Context, arg ResetOtherDefaultProfilesParams) error {
	_, err := q.exec(ctx, q.resetOtherDefaultProfilesStmt, resetOtherDefaultProfiles, arg.UserID, arg.ID)
	return err
}

const updateProfile = `-- name: UpdateProfile :exec
update profiles set
   user_id = $1,
    "status" = $2,
    profile_name = $3,
    basic_block_id = $4,
    contact_block_id = $5,
    page_color = $6,
    font = $7,
    is_default= $8 where id=$9
`

type UpdateProfileParams struct {
	UserID         uuid.UUID     `json:"user_id"`
	Status         bool          `json:"status"`
	ProfileName    string        `json:"profile_name"`
	BasicBlockID   uuid.NullUUID `json:"basic_block_id"`
	ContactBlockID uuid.NullUUID `json:"contact_block_id"`
	PageColor      string        `json:"page_color"`
	Font           string        `json:"font"`
	IsDefault      bool          `json:"is_default"`
	ID             uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.exec(ctx, q.updateProfileStmt, updateProfile,
		arg.UserID,
		arg.Status,
		arg.ProfileName,
		arg.BasicBlockID,
		arg.ContactBlockID,
		arg.PageColor,
		arg.Font,
		arg.IsDefault,
		arg.ID,
	)
	return err
}

const updateProfileUrl = `-- name: UpdateProfileUrl :exec
update profiles set url=$1 where id=$2
`

type UpdateProfileUrlParams struct {
	Url sql.NullString `json:"url"`
	ID  uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateProfileUrl(ctx context.Context, arg UpdateProfileUrlParams) error {
	_, err := q.exec(ctx, q.updateProfileUrlStmt, updateProfileUrl, arg.Url, arg.ID)
	return err
}
