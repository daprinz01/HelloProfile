// Code generated by sqlc. DO NOT EDIT.
// source: contacts.sql

package helloprofiledb

import (
	"context"

	"github.com/google/uuid"
)

const addContacts = `-- name: AddContacts :one
INSERT INTO contacts (user_id, profile_id)
    VALUES ($1, $2)
RETURNING
    id, user_id, profile_id
`

type AddContactsParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProfileID uuid.UUID `json:"profile_id"`
}

func (q *Queries) AddContacts(ctx context.Context, arg AddContactsParams) (Contact, error) {
	row := q.queryRow(ctx, q.addContactsStmt, addContacts, arg.UserID, arg.ProfileID)
	var i Contact
	err := row.Scan(&i.ID, &i.UserID, &i.ProfileID)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
delete from contacts where user_id=$1 and profile_id=$2
`

type DeleteContactParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProfileID uuid.UUID `json:"profile_id"`
}

func (q *Queries) DeleteContact(ctx context.Context, arg DeleteContactParams) error {
	_, err := q.exec(ctx, q.deleteContactStmt, deleteContact, arg.UserID, arg.ProfileID)
	return err
}

const getAllContacts = `-- name: GetAllContacts :many
SELECT
    id, user_id, profile_id
FROM
    contacts
`

func (q *Queries) GetAllContacts(ctx context.Context) ([]Contact, error) {
	rows, err := q.query(ctx, q.getAllContactsStmt, getAllContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(&i.ID, &i.UserID, &i.ProfileID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContacts = `-- name: GetContacts :many
SELECT
    id, user_id, profile_id
FROM
    contacts
WHERE
    user_id = $1
`

func (q *Queries) GetContacts(ctx context.Context, userID uuid.UUID) ([]Contact, error) {
	rows, err := q.query(ctx, q.getContactsStmt, getContacts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(&i.ID, &i.UserID, &i.ProfileID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
