// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package helloprofiledb

import (
	"context"
	"database/sql"
	"time"
)

const addUserRole = `-- name: AddUserRole :one
INSERT INTO user_roles (user_id, role_id)
  VALUES ((
      SELECT
        d.id
      FROM
        users d
      WHERE
        d.username = $1
        OR d.email = $1),
      (
        SELECT
          a.id
        FROM
          roles a
        WHERE
          a.name = $2))
  RETURNING
    id, user_id, role_id
`

type AddUserRoleParams struct {
	Username sql.NullString `json:"username"`
	Name     string         `json:"name"`
}

// select b.name from roles b where b.Id = (select a.role_id from user_roles a where a.user_id = $1);
func (q *Queries) AddUserRole(ctx context.Context, arg AddUserRoleParams) (UserRole, error) {
	row := q.queryRow(ctx, q.addUserRoleStmt, addUserRole, arg.Username, arg.Name)
	var i UserRole
	err := row.Scan(&i.ID, &i.UserID, &i.RoleID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users ("firstname", "lastname", "username", "email", "phone", "is_email_confirmed", "password", "is_password_system_generated", "created_at", "is_locked_out", "image_url", "is_active")
  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING
  id, firstname, lastname, username, email, phone, country, city, is_email_confirmed, password, is_password_system_generated, created_at, is_locked_out, image_url, is_active
`

type CreateUserParams struct {
	Firstname                 sql.NullString `json:"firstname"`
	Lastname                  sql.NullString `json:"lastname"`
	Username                  sql.NullString `json:"username"`
	Email                     string         `json:"email"`
	Phone                     sql.NullString `json:"phone"`
	IsEmailConfirmed          bool           `json:"is_email_confirmed"`
	Password                  sql.NullString `json:"password"`
	IsPasswordSystemGenerated bool           `json:"is_password_system_generated"`
	CreatedAt                 time.Time      `json:"created_at"`
	IsLockedOut               bool           `json:"is_locked_out"`
	ImageUrl                  sql.NullString `json:"image_url"`
	IsActive                  bool           `json:"is_active"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Firstname,
		arg.Lastname,
		arg.Username,
		arg.Email,
		arg.Phone,
		arg.IsEmailConfirmed,
		arg.Password,
		arg.IsPasswordSystemGenerated,
		arg.CreatedAt,
		arg.IsLockedOut,
		arg.ImageUrl,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.Country,
		&i.City,
		&i.IsEmailConfirmed,
		&i.Password,
		&i.IsPasswordSystemGenerated,
		&i.CreatedAt,
		&i.IsLockedOut,
		&i.ImageUrl,
		&i.IsActive,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
Delete from users CASCADE
WHERE
  email = $1
  OR username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, email)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  id, firstname, lastname, email, phone, username, password, country, city, profile_picture, is_email_confirmed, is_locked_out, is_password_system_generated, created_at, is_active, role_name
FROM
  user_details
WHERE
  username = $1
  OR email = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username sql.NullString) (UserDetail, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, username)
	var i UserDetail
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Phone,
		&i.Username,
		&i.Password,
		&i.Country,
		&i.City,
		&i.ProfilePicture,
		&i.IsEmailConfirmed,
		&i.IsLockedOut,
		&i.IsPasswordSystemGenerated,
		&i.CreatedAt,
		&i.IsActive,
		&i.RoleName,
	)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT
  b.name
FROM
  roles b
  INNER JOIN user_roles a ON b.Id = a.role_id
    AND a.user_id = (
      SELECT
        c.id
      FROM
        users c
    WHERE
      c.username = $1
      OR c.email = $1
    LIMIT 1)
`

func (q *Queries) GetUserRoles(ctx context.Context, username sql.NullString) ([]string, error) {
	rows, err := q.query(ctx, q.getUserRolesStmt, getUserRoles, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT
  id, firstname, lastname, email, phone, username, password, country, city, profile_picture, is_email_confirmed, is_locked_out, is_password_system_generated, created_at, is_active, role_name
FROM
  user_details
`

func (q *Queries) GetUsers(ctx context.Context) ([]UserDetail, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserDetail
	for rows.Next() {
		var i UserDetail
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.Phone,
			&i.Username,
			&i.Password,
			&i.Country,
			&i.City,
			&i.ProfilePicture,
			&i.IsEmailConfirmed,
			&i.IsLockedOut,
			&i.IsPasswordSystemGenerated,
			&i.CreatedAt,
			&i.IsActive,
			&i.RoleName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE
  users
SET
  "firstname" = $1,
  "lastname" = $2,
  "username" = $3,
  "email" = $4,
  "is_email_confirmed" = $5,
  "password" = $6,
  "is_password_system_generated" = $7,
  "is_locked_out" = $8,
  "image_url" = $9,
  "is_active" = $10,
  "phone" = $11,
  "country" = $12,
  "city" = $13
WHERE
  "username" = $14
  OR "email" = $14
RETURNING
  id, firstname, lastname, username, email, phone, country, city, is_email_confirmed, password, is_password_system_generated, created_at, is_locked_out, image_url, is_active
`

type UpdateUserParams struct {
	Firstname                 sql.NullString `json:"firstname"`
	Lastname                  sql.NullString `json:"lastname"`
	Username                  sql.NullString `json:"username"`
	Email                     string         `json:"email"`
	IsEmailConfirmed          bool           `json:"is_email_confirmed"`
	Password                  sql.NullString `json:"password"`
	IsPasswordSystemGenerated bool           `json:"is_password_system_generated"`
	IsLockedOut               bool           `json:"is_locked_out"`
	ImageUrl                  sql.NullString `json:"image_url"`
	IsActive                  bool           `json:"is_active"`
	Phone                     sql.NullString `json:"phone"`
	Country                   sql.NullString `json:"country"`
	City                      sql.NullString `json:"city"`
	Username_2                sql.NullString `json:"username_2"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.Firstname,
		arg.Lastname,
		arg.Username,
		arg.Email,
		arg.IsEmailConfirmed,
		arg.Password,
		arg.IsPasswordSystemGenerated,
		arg.IsLockedOut,
		arg.ImageUrl,
		arg.IsActive,
		arg.Phone,
		arg.Country,
		arg.City,
		arg.Username_2,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.Country,
		&i.City,
		&i.IsEmailConfirmed,
		&i.Password,
		&i.IsPasswordSystemGenerated,
		&i.CreatedAt,
		&i.IsLockedOut,
		&i.ImageUrl,
		&i.IsActive,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE
  user_roles
SET
  user_id = (
    SELECT
      a.id
    FROM
      users a
    WHERE
      a.username = $1
      OR a.email = $1
    LIMIT 1),
role_id = (
  SELECT
    b.id
  FROM
    roles b
  WHERE
    b.name = $2)
WHERE
  user_id = (
    SELECT
      c.id
    FROM
      users c
    WHERE
      c.username = $3
      OR c.email = $3
    LIMIT 1)
AND role_id = (
  SELECT
    d.id
  FROM
    roles d
  WHERE
    d.name = $4)
RETURNING
  id, user_id, role_id
`

type UpdateUserRoleParams struct {
	Username   sql.NullString `json:"username"`
	Name       string         `json:"name"`
	Username_2 sql.NullString `json:"username_2"`
	Name_2     string         `json:"name_2"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (UserRole, error) {
	row := q.queryRow(ctx, q.updateUserRoleStmt, updateUserRole,
		arg.Username,
		arg.Name,
		arg.Username_2,
		arg.Name_2,
	)
	var i UserRole
	err := row.Scan(&i.ID, &i.UserID, &i.RoleID)
	return i, err
}
